summary(fit3)
fit3 %>% forecast(h=30,, level=c(80,95)) %>% autoplot()   #fit3 fitting best
fit3 %>% forecast(h=30, level=c(80,95)) %>% autoplot()   #fit3 fitting best
forecast(fit3,h = 12)
plot(forecast(fcmodel, h=30, level=c(80,95)), xaxt='n')
forecast(fit3,h = 30,, level=c(80,95))
fit3 %>% forecast(h=312) %>% autoplot()   #fit3 fitting best
fit3 %>% forecast(h=12) %>% autoplot()   #fit3 fitting best
forecast(fit3,h = 30, level=c(80,95))
summary(fit3)
forecast(fit3,h = 12)
fit3 %>% forecast(h=12) %>% autoplot()   #fit3 fitting best
forecast(fit3,h = 12)
summary(fit3)
fit3 %>% forecast(h=12) %>% autoplot()   #fit3 fitting best
fit3 %>% forecast(h=6) %>% autoplot()   #fit3 fitting best
fit3 %>% forecast(h=4) %>% autoplot()   #fit3 fitting best
fit3 %>% forecast(h=6) %>% autoplot()   #fit3 fitting best
fit3 %>% forecast(h=12) %>% autoplot()   #fit3 fitting best
fit3 %>% forecast(h=10) %>% autoplot()   #fit3 fitting best
x = ts(df$Revenue, start=c(2018, 6), frequency=365)
x
plot(forecast(ets(x), 10), axes = FALSE)
plot(forecast(ets(x), 10), axes = FALSE)
fit6 <- Arima(x, order=c(0,1,1), seasonal=c(0,1,1))
plot(forecast(ets(fit6), 10), axes = FALSE)
x = ts(df$Revenue, start=c(2018, 6), frequency=12)
fit6 <- Arima(x, order=c(0,1,1), seasonal=c(0,1,1))
plot(forecast(ets(fit6), 10), axes = FALSE)
fit3 <- Arima(df2, order=c(0,1,1), seasonal=c(0,1,1))
fit3 %>% forecast(h=10) %>% autoplot(axes = FALSE)   #fit3 fitting best
a = seq(as.Date("2018-06-01"), by="months", length=11)
axis(1, at = as.numeric(a)/365.25+1970, labels = a, cex.axis=0.6)
axis(2, cex.axis=0.6)
df2 <- ts(df$Revenue,start = c(2018,6),frequency = 12)
df2
fit3 <- Arima(df2, order=c(0,1,1), seasonal=c(0,1,1))
plot(forecast(fit3, 10), axes = FALSE)
a = seq(as.Date("2018-06-01"), by="months", length=11)
axis(1, at = as.numeric(a)/365.25+1970, labels = a, cex.axis=0.6)
axis(2, cex.axis=0.6)
axis(2, cex.axis=011.0)
axis(2, cex.axis=1.0)
a = seq(as.Date("2018-06-01"), by="months", length=11)
axis(1, at = as.numeric(a)/365.25+1970, labels = a, cex.axis=0.6)
axis(2, cex.axis=1.0)
plot(forecast(fit3, 10), axes = FALSE)
a = seq(as.Date("2018-06-01"), by="months", length=11)
axis(1, at = as.numeric(a)/365.25+1970, labels = a, cex.axis=0.6)
axis(2, cex.axis=1.0)
plot(forecast(fit3, 10), axes = FALSE)
a = seq(as.Date("2018-06-01"), by="months", length=11)
axis(1, at = as.numeric(a)/365.25+1970, labels = a, cex.axis=0.6)
axis(2, cex.axis=10.0)
plot(forecast(fit3, 10), axes = FALSE)
a = seq(as.Date("2018-06-01"), by="months", length=11)
axis(1, at = as.numeric(a)/365.25+1970, labels = a, cex.axis=10.0)
axis(2, cex.axis=1.0)
plot(forecast(fit3, 10), axes = FALSE)
a = seq(as.Date("2018-06-01"), by="months", length=11)
axis(1, at = as.numeric(a)/365.25+1970, labels = a, cex.axis=3.0)
axis(2, cex.axis=3.0)
df2 <- ts(df$Revenue,start = c(2018,6),frequency = 12)
df2
fit3 <- Arima(df2, order=c(0,1,1), seasonal=c(0,1,1))
fit3 %>% forecast(h=12) %>% autoplot(axes = FALSE)   #fit3 fitting best
forecast(fit3,h = 12)
install.packages("RAdwords")
library(RAdwords)
google_auth <- doAuth()
install.packages("prophet")
library(prophet)
library(xlsx)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
library(prophet)
library(Metrics)
# For any days that promotion will be running, enter 1 for general promotion column.
# Please treat Thanksgiving promotion separate from general promotion. Thanksgiving seasons were coded in separately.
# Step2: Import train and test datasets into R workspace.
# Build thanksgiving and general promotion dataframe.
# Please see specifications in code below.
# Step3: Define train dataset and daily budget for prediction period fit the model.
# Train model and make the prediction. Model will be trained on an ongoing basis to incorporate new datasets.
# For example, if we make the prediction for next month, please include data for this month as part of training data if possible.
# Step4: Generate predicted values and export to excel. Please note that this step also takes care of any negative predicted values.
####################################################################
library(xlsx)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
library(prophet)
library(Metrics)
install.packages("Metrics")
library(Metrics)
####################################################################
####################################################################
# Step2 Start
day_train_ga <- read.xlsx("file_path", sheetName = "train") #change file
promotion_ga <- data_frame(
holiday = 'promotion_ga',
ds = as.Date(c(day_train_ga$date[which(day_train_ga$general_promotion ==
1)],
day_pred_ga$date[which(day_pred_ga$general_promotion ==
1)])),
lower_window = 0,
upper_window = 0
)
promotion_ga <- data.frame(
holiday = 'promotion_ga',
ds = as.Date(c(day_train_ga$date[which(day_train_ga$general_promotion ==
1)],
day_pred_ga$date[which(day_pred_ga$general_promotion ==
1)])),
lower_window = 0,
upper_window = 0
)
thxgiv_promotion_ga <- data.frame(
holiday = 'thxgiv_promotion_ga',
ds = as.Date(thxgiv_ga$date[which(thxgiv_ga$thxgiv_promotion == 1)]),
lower_window = 0,
upper_window = 0
)
library(prophet)
library(data.table)
library(dplyr)
library(ggplot2)
install.packages("data.table")
library(prophet)
library(data.table)
library(dplyr)
library(ggplot2)
setwd("C:/Users/yuvbhard/Desktop/Data-Science-for-Marketing-Analytics-Practice/Facebook Prophet Time Series Model (R & Python)")
train = fread("Train_SU63ISt.csv")
test = fread("Test_0qrQsBZ.csv")
train
#Predicting passsenger traffic using Prophet
'''The dataset is a univariate time series that contains hourly passenger traffic
for a new public transport service. We are trying to forecast the traffic for next
7 months given historical traffic data of last 25 months.'''
library(prophet)
library(data.table)
library(dplyr)
library(ggplot2)
''The dataset is a univariate time series that contains hourly passenger traffic
for a new public transport service. We are trying to forecast the traffic for next
7 months given historical traffic data of last 25 months.''
"The dataset is a univariate time series that contains hourly passenger traffic
for a new public transport service. We are trying to forecast the traffic for next
7 months given historical traffic data of last 25 months."
library(prophet)
library(data.table)
library(dplyr)
library(ggplot2)
setwd("C:/Users/yuvbhard/Desktop/Data-Science-for-Marketing-Analytics-Practice/Facebook Prophet Time Series Model (R & Python)")
train = fread("Train_SU63ISt.csv")
test = fread("Test_0qrQsBZ.csv")
# Extract date from the Datetime variable
train$Date = as.POSIXct(strptime(train$Datetime, "%d-%m-%Y"))
test$Date = as.POSIXct(strptime(test$Datetime, "%d-%m-%Y"))
# Convert 'Datetime' variable from character to date-time format
train$Datetime = as.POSIXct(strptime(train$Datetime, "%d-%m-%Y %H:%M"))
test$Datetime = as.POSIXct(strptime(test$Datetime, "%d-%m-%Y %H:%M"))
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
aggr_train
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Change column names
names(aggr_train) = c("ds", "y")
names(aggr_train) = c("ds", "y")
aggr_train
# Model building
m = prophet(aggr_train)
summary(aggr_train)
data[!is.na(aggr_train$ds), ]
aggr_train[!is.na(aggr_train$ds), ]
aggr_train[is.na(aggr_train$ds), ]
aggr_train$ds <- aggr_train[!is.na(aggr_train$ds), ]
aggr_train$ds <- aggr_train[!is.na(aggr_train$ds), ]
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
#Remove NA from date column (ds column)
aggr_train$ds <- as.character(aggr_train$ds)
aggr_train$ds[is.na(aggr_train$ds)] <- " "
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Change column names from Date, Count to ds,y
names(aggr_train) = c("ds", "y")
aggr_train$Date <- as.character(aggr_train$Date)
aggr_train$Date[is.na(aggr_train$Date)] <- " "
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Change column names from Date, Count to ds,y
names(aggr_train) = c("ds", "y")
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
aggr_train$Date <- as.character(aggr_train$Date)
aggr_train$Date[is.na(aggr_train$Date)] <- " "
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Change column names from Date, Count to ds,y
names(aggr_train) = c("ds", "y")
# Model building
m = prophet(aggr_train)
aggr_train
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
aggr_train$Date <- as.character(aggr_train$Date)
aggr_train$Date[is.na(aggr_train$Date)] <- " "
aggr_train$Date = as.POSIXct(strptime(aggr_train$Date, "%d-%m-%Y"))
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
aggr_train[!is.na(aggr_train$ds), 1:N]
aggr_train[!is.na(aggr_train$ds), 1:n]
aggr_train[!is.na(aggr_train$ds), ]
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
aggr_train[!is.na(aggr_train$ds), ]
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
aggr_train[!is.na(aggr_train$Date), ]
aggr_train = aggr_train[!is.na(aggr_train$Date), ]
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Change column names from Date, Count to ds,y
names(aggr_train) = c("ds", "y")
# Model building
m = prophet(aggr_train)
future = make_future_dataframe(m, periods = 213)
forecast = predict(m, future)
# Visualize forecast
plot(m, forecast)
# proportion of mean hourly 'Count' based on train data
mean_hourly_count = train %>%
group_by(hour = hour(train$Datetime)) %>%
summarise(mean_count = mean(Count))
s = sum(mean_hourly_count$mean_count)
mean_hourly_count$count_proportion = mean_hourly_count$mean_count/s
# variable to store hourly Count
test_count = NULL
for(i in 763:nrow(forecast)){
test_count = append(test_count, mean_hourly_count$count_proportion * forecast$yhat[i])
}
test$Count = test_count
test$HourlyCount = test_count
test_count
test_count[!is.na(test_count), ]
!is.na(test_count)
test$HourlyCount = test_count
!is.na(test_count)
test$HourlyCount = test_count
test$HourlyCount
test$Count
test
test_count[, duration_seq := 1:.N, by = c("ID")]
paste(test$ID,test$test_count)
test = paste(test$ID,test$test_count)
test
test = fread("Test_0qrQsBZ.csv")
test$Date = as.POSIXct(strptime(test$Datetime, "%d-%m-%Y"))
test$Datetime = as.POSIXct(strptime(test$Datetime, "%d-%m-%Y %H:%M"))
aggr_train = train[,list(Count = sum(Count)), by = Date]
#Remove row with NA value from df
aggr_train = aggr_train[!is.na(aggr_train$Date), ]
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Change column names from Date, Count to ds,y
names(aggr_train) = c("ds", "y")
# Model building
m = prophet(aggr_train)
future = make_future_dataframe(m, periods = 213)
forecast = predict(m, future)
# Visualize forecast
plot(m, forecast)
# proportion of mean hourly 'Count' based on train data
mean_hourly_count = train %>%
group_by(hour = hour(train$Datetime)) %>%
summarise(mean_count = mean(Count))
s = sum(mean_hourly_count$mean_count)
mean_hourly_count$count_proportion = mean_hourly_count$mean_count/s
# variable to store hourly Count
test_count = NULL
for(i in 763:nrow(forecast)){
test_count = append(test_count, mean_hourly_count$count_proportion * forecast$yhat[i])
}
test
mutate(test, x = paste(test_count))
test$Count = test_count
test_count
for(i in 763:nrow(forecast)){
test_count = append(test_count, mean_hourly_count$count_proportion * forecast$yhat[i])
}
# variable to store hourly Count
test_count = NULL
for(i in 763:nrow(forecast)){
test_count = append(test_count, mean_hourly_count$count_proportion * forecast$yhat[i])
}
test$Count = test_count
test_count
View(test_count)
library(tidyr)
test_count[is.na(test_count)] = ''
test$Count = test_count
test[is.na(test)] = ''
unite(test, test_count, A:B, sep='')
test
type(test)
typeof(test)
typeof(test_count)
lapply(strsplit(as.character(test_count),
"[][']|,\\s*"), function(x) x[nzchar(x)])
test_count
test_count = NULL
for(i in 763:nrow(forecast)){
test_count = append(test_count, mean_hourly_count$count_proportion * forecast$yhat[i])
}
test_count
lapply(strsplit(as.character(test_count),split=','),trimws)
new_t = lapply(strsplit(as.character(test_count),split=','),trimws)
View(new_t)
View(new_t[!is.na[new_t]])
View(new_t[!is.na(new_t)])
new_t = lapply(strsplit(as.character(test_count),split=','),trimws)
test$Count = test_count['Value']
test
View(test)
View(new_t[!is.na(new_t)])
aggr_train
View(aggr_train)
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
train = fread("Train_SU63ISt.csv")
test = fread("Test_0qrQsBZ.csv")
# Extract date from the Datetime variable
train$Date = as.POSIXct(strptime(train$Datetime, "%d-%m-%Y"))
test$Date = as.POSIXct(strptime(test$Datetime, "%d-%m-%Y"))
# Convert 'Datetime' variable from character to date-time format
train$Datetime = as.POSIXct(strptime(train$Datetime, "%d-%m-%Y %H:%M"))
test$Datetime = as.POSIXct(strptime(test$Datetime, "%d-%m-%Y %H:%M"))
# Aggregate train data day-wise
aggr_train = train[,list(Count = sum(Count)), by = Date]
#Remove row with NA value from df
aggr_train = aggr_train[!is.na(aggr_train$Date), ]
# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Count))
# Model building
m = prophet(aggr_train)
# Change column names from Date, Count to ds,y
names(aggr_train) = c("ds", "y")
# Model building
m = prophet(aggr_train)
# Model building
m = prophet(aggr_train, daily.seasonality=TRUE)
m
future = make_future_dataframe(m, periods = 213)
forecast = predict(m, future)
# Visualize forecast
plot(m, forecast)
m = Prophet(holidays=holidays)
m = prophet(holidays=holidays)
m <- prophet(holidays = holidays)
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
m <- fit.prophet(m, df)
#m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
m <- fit.prophet(m, df)
add_country_holidays(m, country_name = 'US')
holidays = fread("us_holidays_2020.xlsx")
holidays = fread("us_holiday_2020.xlsx")
holidays = fread("us_holiday_2020.xlsx")
holidays <- fread("us_holiday_2020.xlsx")
holidays <- fread("us_holiday_2020.xlsx")
holidays <- fread("us_holidays_2020.xlsx")
holidays <- fread("us_holidays_2020.csv")
holidays
m <- prophet(holidays = holidays['Holidays'])
m <- prophet(holidays = holidays['Date','Holidays'])
holidays <- fread("us_holidays_2020.csv")
m <- prophet(holidays = holidays['Date','Holidays'])
m <- prophet(holidays = holidays['Holidays', 'Date'])
holidays <- fread("us_holidays_2020.csv")
holidays$Date = as.POSIXct(strptime(holidays$Date, "%d-%m-%Y"))
m <- prophet(holidays = holidays)
holidays <- fread("us_holidays_2020.csv")
holidays$Date = as.POSIXct(strptime(holidays$Date, "%d-%m-%Y"))
m <- prophet(holidays = holidays)
holidays <- fread("us_holidays_2020.csv")
holidays$Date = as.POSIXct(strptime(holidays$Date, "%d-%m-%Y"))
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
m <- fit.prophet(m, df)
m <- fit.prophet(m, holidays)
names(holidays) = c("y", "ds")
holidays <- fread("us_holidays_2020.csv")
holidays$Date = as.POSIXct(strptime(holidays$Date, "%d-%m-%Y"))
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
holidays
holidays <- fread("us_holidays_2020.csv")
holidays$ds = as.POSIXct(strptime(holidays$ds, "%d-%m-%Y"))
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
m <- fit.prophet(m, holidays)
holidays <- fread("us_holidays_2020.csv")
holidays$ds = as.POSIXct(strptime(holidays$ds, "%d-%m-%Y %H:%M"))
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
m <- fit.prophet(m, holidays)
holidays <- fread("us_holidays_2020.csv")
holidays$ds = as.POSIXct(strptime(holidays$ds, "%d-%m-%Y %H:%M"))
holidays
holidays <- fread("us_holidays_2020.csv")
holidays
holidays$ds = as.POSIXct(strptime(holidays$ds, "%d-%m-%Y %H:%M"))
holidays
library(lubridate)
holidays$ds = ymd_hms(holidays$ds)
holidays <- fread("us_holidays_2020.csv")
holidays$ds = ymd_hms(holidays$ds)
holidays <- fread("us_holidays_2020.xlsx")
holidays <- fread("us_holidays_2020.csv")
holidays$ds = ymd_hms(holidays$ds)
holidays <- fread("us_holidays_2020.csv")
holidays <- fread("us_holidays_2020.csv")
holidays
require(xlsx)
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "Sheet1")
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020")
#holidays <- fread("us_holidays_2020.csv")
holidays$ds = ymd_hms(holidays$ds)
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
m <- fit.prophet(m, holidays)
m <- fit.prophet(m, holidays, yearly.seasonality=TRUE)
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020")
holidays$ds = ymd_hms(holidays$ds)
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
m <- fit.prophet(m, holidays, yearly.seasonality=TRUE)
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020")
holidays$ds = ymd_hms(holidays$ds, yearly.seasonality=TRUE)
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020")
holidays$ds = ymd_hms(holidays$ds)
m <- prophet(holidays = holidays, yearly.seasonality=TRUE)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
m <- fit.prophet(m, holidays)
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020")
holidays$ds = ymd_hms(holidays$ds)
m <- prophet(holidays = holidays, yearly.seasonality=TRUE, weekly.seasonality=TRUE, daily.seasonality=TRUE)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
m <- fit.prophet(m, holidays)
View(holidays)
new_year <- data_frame(
holiday = 'New Year Day',
ds = as.Date(c('2020-01-01')),
lower_window = 0,
upper_window = 1
)
new_year <- tibble(
holiday = 'New Year Day',
ds = as.Date(c('2020-01-01')),
lower_window = 0,
upper_window = 1
)
new_year
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020")
holidays$ds = ymd_hms(holidays$ds)
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds")
m <- fit.prophet(m, holidays)
m <- fit.prophet(m, holidays)
names(holidays) = c("y", "ds", "lower_window","upper_window")
m <- fit.prophet(m, holidays)
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020")[:5]
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020",nrows=5)
holidays
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020",nrows=4)
holidays
holidays <- read.xlsx("us_holidays_2020.xlsx", sheetName = "us_holidays_2020", range = cell_rows(1:5))
library(readxl)
holidays <- read_excel("us_holidays_2020.xlsx", range = cell_rows(1:5))
holidays$ds = ymd_hms(holidays$ds)
holidays
m <- prophet(holidays = holidays)
m <- add_country_holidays(m, country_name = 'US')
names(holidays) = c("y", "ds", "lower_window","upper_window")
m <- fit.prophet(m, holidays)
future <- fit.prophet(m, holidays)
names(holidays) = c("y", "ds", "lower_window","upper_window")
holidays
future <- fit.prophet(m, holidays)
summary(m)
summary(holidays)
future <- predict(m, holidays)
future <- fit.prophet(m, holidays)
